/*

Copyright 2017 ZeroEx Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

/*
 Modified by Jaynti Kanani <jdkanani@matic.network>
*/

import { getPcToInstructionIndexMapping } from './trace'

const RADIX = 10
export function getLocationByOffset(str) {
  const locationByOffset = { 0: { line: 1, column: 0 } }
  let currentOffset = 0
  for (const char of str.split('')) {
    const location = locationByOffset[currentOffset]
    const isNewline = char === '\n'
    locationByOffset[currentOffset + 1] = {
      line: location.line + (isNewline ? 1 : 0),
      column: isNewline ? 0 : location.column + 1
    }
    currentOffset++
  }
  return locationByOffset
}

// Parses a sourcemap string
// The solidity sourcemap format is documented here: https://github.com/ethereum/solidity/blob/develop/docs/miscellaneous.rst#source-mappings
export function parseSourceMap(sourceCodes, srcMap, bytecodeHex, sources) {
  const bytecode = Uint8Array.from(Buffer.from(bytecodeHex, 'hex'))
  const pcToInstructionIndex = getPcToInstructionIndexMapping(bytecode)
  const locationByOffsetByFileIndex = sourceCodes.map(getLocationByOffset)
  const entries = srcMap.split(';')
  let lastParsedEntry = {}
  const instructionIndexToSourceRange = {}
  entries.forEach((entry, i) => {
    const [
      instructionIndexStrIfExists,
      lengthStrIfExists,
      fileIndexStrIfExists
      // jumpTypeStrIfExists
    ] = entry.split(':')
    const instructionIndexIfExists = parseInt(
      instructionIndexStrIfExists,
      RADIX
    )
    const lengthIfExists = parseInt(lengthStrIfExists, RADIX)
    const fileIndexIfExists = parseInt(fileIndexStrIfExists, RADIX)
    const offset = isNaN(instructionIndexIfExists)
      ? lastParsedEntry.offset
      : instructionIndexIfExists
    const length = isNaN(lengthIfExists)
      ? lastParsedEntry.length
      : lengthIfExists
    const fileIndex = isNaN(fileIndexIfExists)
      ? lastParsedEntry.fileIndex
      : fileIndexIfExists
    const parsedEntry = {
      offset,
      length,
      fileIndex
    }

    if (parsedEntry.fileIndex !== -1) {
      const file = locationByOffsetByFileIndex[parsedEntry.fileIndex]
      const sourceRange = {
        location: {
          start: file[parsedEntry.offset],
          end: file[parsedEntry.offset + parsedEntry.length]
        },
        fileName: sources[parsedEntry.fileIndex]
      }
      instructionIndexToSourceRange[i] = sourceRange
    } else {
      // Some assembly code generated by Solidity can't be mapped back to a line of source code.
      // Source: https://github.com/ethereum/solidity/issues/3629
    }
    lastParsedEntry = parsedEntry
  })

  const pcsToSourceRange = {}
  Object.keys(pcToInstructionIndex).forEach(programCounterKey => {
    const pc = parseInt(programCounterKey, RADIX)
    const instructionIndex = pcToInstructionIndex[pc]
    pcsToSourceRange[pc] = instructionIndexToSourceRange[instructionIndex]
  })

  return pcsToSourceRange
}
